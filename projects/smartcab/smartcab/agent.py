import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator
import numpy as np

"""
Rules:
    Light:
        On a green light, a left turn is permitted if there is no oncoming traffic making a right turn or coming straight through the intersection.
        On a red light, a right turn is permitted if no oncoming traffic is approaching from your left through the intersection.
Inputs:
    # {'light': 'red', 'oncoming': None, 'right': None, 'left': None}

Actions:
    The smartcab may either idle at the intersection, or drive to the next intersection to the left, right, or ahead of it.

Time limit:
    Finally, each trip has a time to reach the destination which decreases for each action taken (the passengers want to get there quickly). If the allotted time becomes zero before reaching the destination, the trip has failed.
"""


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)  # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning  # Whether the agent is expected to learn
        self.Q = dict()  # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon  # Random exploration factor
        self.alpha = alpha  # Learning factor
        self.training_trails = 0
        self.correct_action = 0.0
        self.wrong_action = 0.0

    # DONE
    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        if testing:
            # If 'testing' is True, set epsilon and alpha to 0
            self.epsilon = 0
            self.alpha = 0
        else:

            # self.epsilon -= 0.05
            # self.epsilon = math.pow(self.alpha, self.training_trails)
            # self.epsilon = 1 / math.pow(self.training_trails, 2)
            # self.epsilon = math.pow(math.e, -self.alpha * self.training_trails)
            # self.epsilon = math.cos(self.alpha * self.training_trails)
            self.epsilon -= self.training_trails * 0.0000005
            self.training_trails += 1

            self.correct_action = 0.0
            self.wrong_action = 0.0
            pass

        return None

    # DONE
    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint()  # The next waypoint
        inputs = self.env.sense(self)  # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        # NOTE : you are not allowed to engineer eatures outside of the inputs available.
        # Because the aim of this project is to teach Reinforcement Learning, we have placed
        # constraints in order for you to learn how to adjust epsilon and alpha, and thus learn about the balance between exploration and exploitation.
        # With the hand-engineered features, this learning process gets entirely negated.

        # Set 'state' as a tuple of relevant data for the agent
        state = (waypoint, inputs['light'], inputs['left'], inputs['right'], inputs['oncoming'])

        return state

    # DONE
    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        # Calculate the maximum Q-value of all actions for a given state
        max_score = None
        for action in self.env.valid_actions:
            score = self.Q.get(state).get(action)
            if score >= max_score or not max_score:
                max_score = score

        return max_score

    # DONE
    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0\
        print(len(self.Q.keys()))
        if self.learning:
            values = self.Q.get(state)
            if not values:
                self.Q[state] = {}
                for action in self.env.valid_actions:
                    self.Q[state][action] = 0.0
        return

    # DONE
    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """
        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        random_explore = random.random() < self.epsilon
        if not self.learning or random_explore:
            # When not learning, choose a random action
            # When learning, choose a random action with 'epsilon' probability
            return random.choice(self.env.valid_actions)

        # Otherwise, choose an action with the highest Q-value for the current state
        max_score = self.get_maxQ(state)
        print(max_score)

        def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
            return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)

        max_actions = [action for action in self.env.valid_actions if isclose(self.Q.get(state).get(action), max_score)]
        print('max actions', max_actions)
        # Be sure that when choosing an action with highest Q-value that you randomly select between actions that "tie".
        action = random.choice(max_actions)
        return action

    # DONE
    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if reward > 0:
            self.correct_action += 1
        else:
            self.wrong_action += 1
        print(self.correct_action, self.wrong_action, self.correct_action / (self.correct_action + self.wrong_action))
        # Q^(s, a) += alpha * R(S)
        if self.learning:
            self.Q[state][action] = self.Q[state][action] + self.alpha * (reward - self.Q[state][action])
        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()  # Get current state
        self.createQ(state)  # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action)  # Receive a reward
        self.learn(state, action, reward)  # Q-learn

        return


def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, epsilon=1, alpha=0.02)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to logs trial and simulation results to /logs
    #   optimized    - set to True to change the default logs file name
    sim = Simulator(env, update_delay=0.001, display=False, log_metrics=True, optimized=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=10, tolerance=0.001)


if __name__ == '__main__':
    run()
